local blankfunction=function(...)return...end
local cloneref=cloneref or blankfunction

local functions = {}
functions.services = {}

functions.getService = function(s) if not functions.services[s] then functions.services[s] = cloneref(game:GetService(s)) end return functions.services[s] end
functions.loadedModules = {}
functions.Farms = workspace:WaitForChild("Farm")
functions.extractDigitsFromText = function(t) return tonumber(t:match("%d+")) or 0 end
functions.getPlayerMoney = function() return functions.getService("Players").LocalPlayer.leaderstats.Sheckles.Value end
functions.tweenService       =functions.getService("TweenService")
functions.runService         =functions.getService("RunService")
functions.players            =functions.getService("Players")
functions.userInputService   =functions.getService("UserInputService")
functions.guiService         =functions.getService("GuiService")
functions.replicatedStorage  =functions.getService("ReplicatedStorage")
functions.virtualInputManager=functions.getService("VirtualInputManager")
functions.coreGui            =functions.getService("CoreGui")
functions.lighting           =functions.getService("Lighting")
functions.httpService        =functions.getService("HttpService")
functions.teleportService    =functions.getService("TeleportService")
functions.marketplaceService =functions.getService("MarketplaceService")
functions.collectionService  =functions.getService("CollectionService")
functions.terrain            =workspace and workspace.Terrain

functions.seedList = {"Cherry Blossom Seed", "Daffodil Seed", "Coconut Seed", "Lumira", "Crocus", "Easter Egg Seed", "Traveler's Fruit", "Apple Seed", "Dandelion", "Cocovine", "Red Lollipop Seed", "Succulent Seed", "Rosy Delight Seed", "Cranberry Seed", "Loquat Seed", "Dragon Pepper", "Moon Blossom Seed", "Pineapple Seed", "Blood Banana Seed", "Crimson Vine Seed", "Pear Seed", "Nectar Thorn", "Bell Pepper Seed", "Pepper Seed", "Cacao Seed", "Lotus Seed", "Lime Seed", "Orange Tulip", "Cursed Fruit Seed", "Carrot Seed", "Mango Seed", "Green Apple Seed", "Elephant Ears", "Lavender", "Hive Fruit", "Parasol Flower", "Moonglow Seed", "Feijoa Seed", "Avocado Seed", "Mint Seed", "Noble Flower", "Tomato Seed", "Ice Cream Bean Seed", "Nightshade Seed", "Lemon Seed", "Sugar Apple", "Wild Carrot Seed", "Bee Balm", "Starfruit Seed", "Bendboo", "Violet Corn", "Passionfruit Seed", "Papaya Seed", "Corn Seed", "Blueberry Seed", "Candy Blossom Seed", "Purple Dahlia Seed", "Nectarine", "Strawberry Seed", "Bamboo Seed", "Sunflower", "Pink Lily Seed", "Banana Seed", "Rose", "Peach Seed", "Lilac", "Foxglove", "Mushroom Seed", "Moon Mango Seed", "Beanstalk Seed", "Cantaloupe Seed", "Candy Sunflower Seed", "Ember Lily", "Suncoil", "Glowshroom Seed", "Venus Fly Trap Seed", "Eggplant Seed", "Durian Seed", "Soul Fruit Seed", "Prickly Pear Seed", "Cauliflower Seed", "Honeysuckle", "Raspberry Seed", "Dragon Fruit Seed", "Moon Melon Seed", "Moonflower Seed", "Chocolate Carrot Seed", "Watermelon Seed", "Celestiberry Seed", "Cactus Seed", "Grape Seed", "Nectarshade", "Pumpkin Seed", "Kiwi Seed", "Manuka Flower"}
table.sort( functions.seedList )
functions.sortedMutations = {"Alienlike", "Bloodlit", "Burnt", "Celestial", "Chilled", "Choc", "Cooked", "Dawnbound", "Disco", "Frozen", "Galactic", "Heavenly", "HoneyGlazed", "Meteoric", "Molten", "Moonlit", "Paradisal", "Plasma", "Pollinated", "Shocked", "Sundried", "Twisted", "Verdant", "Voidtouched", "Wet", "Windstruck", "Zombified"}
table.sort( functions.sortedMutations )

functions.mutationColors = {
    ["Wet"]         = Color3.fromRGB(64, 164, 223),
    ["Chilled"]     = Color3.fromRGB(135, 206, 250),
    ["Choc"]        = Color3.fromRGB(92, 64, 51),
    ["Moonlit"]     = Color3.fromRGB(153, 141, 255),
    ["Pollinated"]  = Color3.fromRGB(255, 170, 0),
    ["Bloodlit"]    = Color3.fromRGB(200, 0, 0),
    ["Plasma"]      = Color3.fromRGB(208, 43, 137),
    ["HoneyGlazed"] = Color3.fromRGB(255, 204, 0),
    ["Heavenly"]    = Color3.fromRGB(255, 249, 160),
    ["Frozen"]      = Color3.fromRGB(108, 184, 255),
    ["Zombified"]   = Color3.fromRGB(128, 199, 127),
    ["Rainbow"]     = Color3.fromRGB(255, 105, 180),
    ["Shocked"]     = Color3.fromRGB(255, 255, 100),
    ["Celestial"]   = Color3.fromRGB(255, 0, 255),
    ["Disco"]       = Color3.fromRGB(255, 105, 180),
    ["Voidtouched"] = Color3.fromRGB(225, 0, 255),
    ["Dawnbound"]   = Color3.fromRGB(255, 213, 0),
    ["Burnt"]       = Color3.fromRGB(40, 40, 40),
    ["Twisted"]     = Color3.fromRGB(191, 191, 191),
    ["Cooked"]      = Color3.fromRGB(210, 120, 60),
    ["Molten"]      = Color3.fromRGB(223, 100, 0),
    ["Beenaded"]    = Color3.fromRGB(179, 229, 252),
    ["Gold"]        = Color3.fromRGB(255, 215, 0),
    ["Windstruck"]  = Color3.fromRGB(162, 185, 209),
    ["Meteoric"]    = Color3.fromRGB(73, 29, 193),
    ["Alienlike"]   = Color3.fromRGB(0, 223, 197),
    ["Galactic"]    = Color3.fromRGB(243, 148, 255),
    ["Paradisal"]   = Color3.fromRGB(176, 240, 0),
    ["Plasma"]      = Color3.fromRGB(208, 43, 137),
    ["Sundried"]    = Color3.fromRGB(207, 93, 0),
    ["Verdant"]     = Color3.fromRGB(34, 139, 34),
}


functions.waitFor=function(n,p)return p:WaitForChild(n,60)end
functions.getModule=function(p,n)if not functions.loadedModules[n]then local m=p:FindFirstChild(n)if not m or not m:IsA("ModuleScript")then warn("❌ Module not found or invalid -> Trash exec",n)return nil end;local s,r=pcall(require,m)if s then functions.loadedModules[n]=r else warn("❌ Failed to load module -> Trash exec",n,r)return nil end end;return functions.loadedModules[n]end
functions.GetTool = function(c)return c and c:FindFirstChildOfClass("Tool")end
functions.getHumanoidRootPart=function()local p=functions.players.LocalPlayer if p and p.Character then return p.Character:FindFirstChild("HumanoidRootPart")end return nil end
functions.refreshPlayerList = function(d)local t={}for _,p in ipairs(game.Players:GetPlayers())do if p~=functions.players.LocalPlayer then table.insert(t,p.Name)end end table.sort(t)d:Refresh(t)end
functions.parseTargetFruits = function(d)local u,p={},{};for _,f in ipairs(d.Value or {})do local c=f:match("^%s*(.-)%s*$"):lower()if c~=""then u[c]=true end end;for n in pairs(u)do table.insert(p,n)end;return p end
functions.hasAnyMutation = function(obj, m)return obj and obj.GetAttributes and (function()for a in pairs(obj:GetAttributes())do local l=string.lower(a)if type(m)=="table"then for k,v in pairs(m)do if v and l==string.lower(k)then return true end end;for _,v in ipairs(m)do if l==string.lower(v)then return true end end end end;return false end)()or false end
functions.togglePrompts = function(enabled) for _, prompt in ipairs(functions.Farms:GetDescendants()) do if prompt:IsA("ProximityPrompt") and prompt.Enabled ~= enabled then prompt.Enabled = enabled end end end
functions.hidePlantVisualEffects=function(hide)if not functions.Farms then return end;local t=hide and 1 or 0.5;for _,d in ipairs(functions.Farms:GetDescendants())do if d:IsA("ParticleEmitter")then d.Enabled=not hide elseif d.Name=="FrozenShell"and d:IsA("BasePart")then d.Transparency=t end end end
functions.makeHttpRequest=function(requestData)
    local request_functions = {
        request,
        http_request,
        syn and syn.request,
        http and http.request,
        fluxus and fluxus.request,
        function(data)
            if functions.httpService.RequestInternal then
                return functions.httpService:RequestInternal(data)
            end
        end
    }

    for _, func in pairs(request_functions) do
        if func then
            local success, response = pcall(func, requestData)
            if success and response then
                return response
            end
        end
    end

    return nil
end

functions.setUniversalClipboard = function(text)
    local clipboard_functions = {
        setclipboard,
        toclipboard,
        writeclipboard,
        syn and syn.write_clipboard,
        Clipboard and Clipboard.set
    }

    for _, func in pairs(clipboard_functions) do
        if func then
            local success = pcall(func, text)
            if success then
                return true
            end
        end
    end

    return false
end

functions.getUniversalHWID = function()
    local function safeCall(fn)
        if typeof(fn) == "function" then
            local success, result = pcall(fn)
            if success and result and result ~= "" then
                return tostring(result)
            end
        end
        return nil
    end

    local hwid = nil

    local hwid_methods = {
        function()
            local success, result = pcall(function() return gethwid end)
            return success and typeof(result) == "function" and result() or nil
        end,
        function()
            local success, result = pcall(function() return gethardwareid end)
            return success and typeof(result) == "function" and result() or nil
        end,
        function()
            local success, result = pcall(function()
                return game:GetService("RbxAnalyticsService"):GetClientId()
            end)
            return success and result or nil
        end,
        function()
            local success, result = pcall(function()
                local player = game:GetService("Players").LocalPlayer
                return player and player.Name .. "_" .. game.JobId or nil
            end)
            return success and result or nil
        end
    }

    for _, method in ipairs(hwid_methods) do
        hwid = safeCall(method)
        if hwid then break end
    end

    return hwid or ("fallback-hwid-" .. tostring(tick()))
end


task.defer(function()local function t(e)if not e then return end;local h=functions.getHumanoidRootPart()if not h then return end;if not pcall(function()firetouchinterest(h,e,0)task.wait()firetouchinterest(h,e,1)end)then warn("Touch function failed - firetouchinterest may not be available")end end;local p=functions.players.LocalPlayer;workspace.ChildAdded:Connect(function(c)if not c:IsA("Model")then return end;task.wait(1)if c:GetAttribute("SEED_GIVEN")and c:GetAttribute("OWNER")==p.Name then task.wait(2)local part=c:FindFirstChildOfClass("Part")if not part then return end;t(part)end end)end)
return functions
