local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- Wait for PlayerScripts and FlyScript to exist
local playerScripts = localPlayer:WaitForChild("PlayerScripts")
local flyScript = playerScripts:WaitForChild("FlyScript")

-- Enable FlyScript and set gamemode
flyScript.Enabled = true
localPlayer:SetAttribute("Gamemode", "Creative")

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ProximityPromptService = game:GetService("ProximityPromptService")

local LocalPlayer = Players.LocalPlayer
local PlantHoverUI = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("PlantHover_UI")
local Frame = PlantHoverUI:WaitForChild("Frame")
local PlantName = Frame:WaitForChild("PlantName")
local PlantInfo = Frame:WaitForChild("PlantInfo")
local PlantValue = Frame:WaitForChild("PlantValue")
local PlantMuts = Frame:WaitForChild("PlantMuts")

local FruitMutationUI = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("FruitMutation_UI"):WaitForChild("Frame")
local FruitName = FruitMutationUI:WaitForChild("FruitName")
local FruitMutation = FruitMutationUI:WaitForChild("FruitMutation")
local FruitValue = FruitMutationUI:WaitForChild("FruitValue")

-- Modules
local CreateTagHandler = require(ReplicatedStorage.Modules.CreateTagHandler)
local GrowableData = require(ReplicatedStorage.Data.GrowableData)
local NumberUtil = require(ReplicatedStorage.Modules.NumberUtil)
local Trove = require(ReplicatedStorage.Modules.Trove)
local Remotes = require(ReplicatedStorage.Modules.Remotes)
local SeedData = require(ReplicatedStorage.Data.SeedData)
local ItemModule = require(ReplicatedStorage.Item_Module)
local CalculatePlantValue = require(ReplicatedStorage.Modules.CalculatePlantValue)
local CommaModule = require(ReplicatedStorage.Comma_Module)
local MutationHandler = require(ReplicatedStorage.Modules.MutationHandler):GetMutations()
local GetMouseToWorld = require(ReplicatedStorage.Modules.GetMouseToWorld)
local EventGearData = require(ReplicatedStorage.Data.EventGearData)

local CurrentCamera = workspace.CurrentCamera
local Highlight = LocalPlayer.PlayerScripts.PlantOutline:WaitForChild("Highlight")

-- Disable original plant outline
LocalPlayer.PlayerScripts.PlantOutline.Enabled = false

-- Variables
workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
    workspace.CurrentCamera = CurrentCamera
end)

local currentGrowthPercent = 0
local currentPlant = nil
local growablePlants = {}
local plantAges = {}
local plantTimers = {}
local currentWeatherEvent = workspace:GetAttribute("CurrentWeatherEvent") or "Default"
local weatherData = GrowableData:GetDataForWeather(currentWeatherEvent)
local rainbowTweens = {}
local currentFruit = nil
local isShowingPlantUI = false
local isShowingFruitUI = false

workspace:GetAttributeChangedSignal("CurrentWeatherEvent"):Connect(function()
    currentWeatherEvent = workspace:GetAttribute("CurrentWeatherEvent") or "Default"
    weatherData = GrowableData:GetDataForWeather(currentWeatherEvent)
end)

local raycastParams = RaycastParams.new()
raycastParams.FilterDescendantsInstances = growablePlants
raycastParams.FilterType = Enum.RaycastFilterType.Include

-- Shared utility functions
local function IsFruit(object)
    return object:FindFirstAncestor("Fruits") ~= nil
end

local function GetDisplayName(object)
    if IsFruit(object) then
        local parent = object.Parent
        if parent and parent.Name ~= "Fruits" then
            return parent.Name
        else
            return object.Name
        end
    else
        return object.Name
    end
end

local function Color3ToHex(color)
    return string.format("#%02X%02X%02X", color.R * 255, color.G * 255, color.B * 255)
end

local function StartRainbowTween(textObject, template, replacementText)
    if rainbowTweens[textObject] then
        rainbowTweens[textObject]:Disconnect()
    end
    local hue = 0
    rainbowTweens[textObject] = RunService.RenderStepped:Connect(function(deltaTime)
        hue = (hue + deltaTime * 0.2) % 1
        local color = Color3.fromHSV(hue, 1, 1)
        textObject.Text = template:gsub("ðŸŒˆ", string.format("<font color=\"%s\">%s</font>", Color3ToHex(color), replacementText))
    end)
end

local function StopAllRainbowTweens()
    for _, connection in pairs(rainbowTweens) do
        connection:Disconnect()
    end
    table.clear(rainbowTweens)
end

local function FindPlantModel(part)
    while part and part ~= workspace do
        if part:IsA("Model") and part:HasTag("Growable") then
            return part
        end
        part = part:FindFirstAncestorWhichIsA("Model")
    end
    return nil
end

local function SetupPlantName(nameLabel, plantName, originalName)
    local seedInfo = SeedData[originalName]
    local rarity = seedInfo and seedInfo.SeedRarity
    local rarityData = rarity and ItemModule.Return_Rarity_Data(rarity)
    
    if rarity == "Prismatic" then
        nameLabel.Text = "ðŸŒˆ"
        StartRainbowTween(nameLabel, "ðŸŒˆ", plantName)
    elseif rarityData then
        local color = rarityData[2]
        nameLabel.Text = string.format("<font color=\"%s\">%s</font>", Color3ToHex(color), plantName)
    else
        nameLabel.Text = plantName
    end
end

local function GetVariantInfo(plant)
    local variant = plant:FindFirstChild("Variant")
    if variant and variant:IsA("StringValue") then
        local value = variant.Value
        if value ~= "" and value ~= "Normal" then
            local color = nil
            if value == "Rainbow" then
                color = nil
            elseif value == "Gold" then
                color = "#FFD700"
            else
                color = "#FFFFFF"
            end
            return value, color
        end
    end
    return nil, nil
end

local function GetMutationInfo(plant)
    local mutations = {}
    for mutationName, mutationData in pairs(MutationHandler) do
        if plant:GetAttribute(mutationName) then
            local color = "#FFFFFF"
            if mutationData.Color then
                color = Color3ToHex(mutationData.Color)
            end
            table.insert(mutations, {
                Name = mutationName,
                Color = color
            })
        end
    end
    return mutations
end

local function SetupMutationsText(mutLabel, variant, variantColor, mutations)
    local displayParts = {}
    
    if variant then
        if variant == "Rainbow" then
            table.insert(displayParts, "ðŸŒˆ")
        else
            table.insert(displayParts, string.format("<font color=\"%s\">%s</font>", variantColor, variant))
        end
    end
    
    for _, mutation in ipairs(mutations) do
        table.insert(displayParts, string.format("<font color=\"%s\">%s</font>", mutation.Color, mutation.Name))
    end
    
    if #displayParts > 0 then
        local combinedText = table.concat(displayParts, " <font color=\"#FFFFFF\">+</font> ")
        mutLabel.Text = combinedText
        mutLabel.Visible = true
        
        if variant == "Rainbow" then
            StartRainbowTween(mutLabel, combinedText, "Rainbow")
        end
    else
        mutLabel.Text = ""
        mutLabel.Visible = false
    end
end

local function GetPlantWeight(plant)
    local weight = plant:FindFirstChild("Weight")
    return string.format("%.2f", weight.Value)
end


-- Growable plant tracking
CreateTagHandler({
    ["Tag"] = "Growable",
    ["OnInstanceAdded"] = function(plant)
        if plant:IsDescendantOf(workspace) then
            table.insert(growablePlants, plant)
            raycastParams:AddToFilter(plant)
        end
    end,
    ["OnInstanceRemoved"] = function(plant)
        local index = table.find(growablePlants, plant)
        if index then
            table.remove(growablePlants, index)
            raycastParams.FilterDescendantsInstances = growablePlants
            plantAges[plant] = nil
            plantTimers[plant] = nil
        end
    end
})

-- Growth timer system
local isTimerEnabled = false
local timerTrove = Trove.new()

local function UpdateTimeLeft(plant)
    if plant then
        local plantData = GrowableData:GetDataForPlant(plant)
        if plantData then
            local growComponent = plant:WaitForChild("Grow", 1)
            local ageValue
            if growComponent then
                ageValue = growComponent:WaitForChild("Age", 1)
            end
            if ageValue then
                local growTickTime = plantData.GrowTickTime
                plantTimers[plant] = math.ceil(((plant:GetAttribute("MaxAge") or 1) - ageValue.Value) / plantData.GrowRate) * (Random.new(plant.Item_Seed.Value):NextNumber() * (growTickTime.Max - growTickTime.Min) + growTickTime.Min)
                plantAges[plant] = nil
            end
        end
    end
end

Remotes.Plant.Update.listen(function(plant)
    if isTimerEnabled then
        pcall(UpdateTimeLeft, plant)
    end
end)

local function UpdateGrowTimer()
    local timerAttribute = LocalPlayer:GetAttribute("AB_GrowTimer")
    if timerAttribute then
        if not isTimerEnabled then
            isTimerEnabled = true
            local deltaTime = 0
            timerTrove:Add(RunService.PostSimulation:Connect(function(dt)
                deltaTime = deltaTime + dt
                if deltaTime >= 0.2 then
                    local timeStep = deltaTime
                    deltaTime = 0
                    for _, plant in growablePlants do
                        local timer = plantTimers[plant]
                        if timer then
                            if timer > 0 then
                                plantTimers[plant] = plantTimers[plant] - timeStep * ((plant:GetAttribute("GrowRateMulti") or 1) * weatherData.GrowRateMulti)
                            end
                        else
                            local growComponent = plant:FindFirstChild("Grow")
                            if growComponent then
                                local ageValue = growComponent:FindFirstChild("Age")
                                if ageValue and plant:GetAttribute("MaxAge") then
                                    local currentAge = ageValue.Value
                                    local lastAge = plantAges[plant]
                                    if lastAge ~= currentAge or currentAge == 0 then
                                        if lastAge and not plantTimers[plant] then
                                            UpdateTimeLeft(plant)
                                        else
                                            plantAges[plant] = currentAge
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end))
        end
    elseif isTimerEnabled then
        isTimerEnabled = false
        for _, plant in growablePlants do
            plantAges[plant] = nil
            plantTimers[plant] = nil
        end
        timerTrove:Clean()
    end
end

task.spawn(UpdateGrowTimer)
LocalPlayer:GetAttributeChangedSignal("AB_GrowTimer"):Connect(UpdateGrowTimer)

-- Plant hover UI
local updateTimer = 0

RunService.PostSimulation:Connect(function(deltaTime)
    local mousePos = UserInputService:GetMouseLocation()
    Frame.Position = UDim2.new(0.01, mousePos.X, 0, mousePos.Y)
    
    updateTimer = updateTimer + deltaTime
    if updateTimer < 0.1 then
        return
    else
        updateTimer = 0
        
        local raycastResult = GetMouseToWorld(raycastParams, 1000)
        local hoveredPlant = nil
        
        if raycastResult and raycastResult.Instance then
            local instance = raycastResult.Instance
            local plantModel = FindPlantModel(instance)
            
            if plantModel and (plantModel:GetAttribute("Inspected") or IsFruit(instance)) then
                hoveredPlant = plantModel
            end
        end
        
        if hoveredPlant and hoveredPlant:GetAttribute("IsOutlined") then
            hoveredPlant = nil
        end
        
        if hoveredPlant then
            local isInspected = hoveredPlant:GetAttribute("Inspected")
            local isFruit = IsFruit(hoveredPlant)
            
            if hoveredPlant == currentPlant then
                -- Update existing plant display
                local maxAge = hoveredPlant:GetAttribute("MaxAge")
                local growComponent = hoveredPlant:FindFirstChild("Grow")
                
                if growComponent then
                    local ageValue = growComponent:FindFirstChild("Age")
                    if maxAge and ageValue then
                        currentGrowthPercent = currentGrowthPercent + (math.clamp(ageValue.Value / maxAge * 100, 0, 100) - currentGrowthPercent) * math.clamp(deltaTime * 10, 0, 1)
                        
                        if currentGrowthPercent ~= currentGrowthPercent or (currentGrowthPercent == math.huge or currentGrowthPercent == -math.huge) then
                            currentGrowthPercent = 0
                        end
                        
                        if LocalPlayer:GetAttribute("AB_GrowTimer") then
                            local timeLeft = plantTimers[currentPlant] or 0
                            local timeText = ""
                            if timeLeft <= 0 then
                                timeText = ""
                            elseif timeLeft < 60 then
                                timeText = string.format("%.1fs", timeLeft)
                            else
                                timeText = NumberUtil.compactFormat(timeLeft)
                            end
                            PlantInfo.Text = timeText
                        else
                            if isFruit then
                                PlantInfo.Text = string.format("%.0f%% Ripened", currentGrowthPercent)
                            else
                                PlantInfo.Text = string.format("%.0f%% Grown", currentGrowthPercent)
                            end
                        end
                    end
                    PlantInfo.Visible = PlantInfo.Text ~= ""
                end
            else
                -- Setup new plant display
                currentPlant = hoveredPlant
                local maxAge = currentPlant:GetAttribute("MaxAge")
                local ageValue = currentPlant.Grow:FindFirstChild("Age")
                
                if maxAge and ageValue then
                    local growthPercent = math.clamp(ageValue.Value / maxAge * 100, 0, 100)
                    currentGrowthPercent = growthPercent
                    
                    StopAllRainbowTweens()
                    
                    local displayName = GetDisplayName(currentPlant)
                    local originalName = currentPlant.Name
                    
                    SetupPlantName(PlantName, displayName, originalName)
                    
                    -- Growth/Timer info
                    if growthPercent >= 100 then
                        if isFruit then
                            PlantInfo.Text = "Ready to Harvest"
                        else
                            PlantInfo.Text = ""
                        end
                    elseif LocalPlayer:GetAttribute("AB_GrowTimer") then
                        local timeLeft = plantTimers[currentPlant] or 0
                        local timeText = ""
                        if timeLeft <= 0 then
                            timeText = ""
                        elseif timeLeft < 60 then
                            timeText = string.format("%.1fs", timeLeft)
                        else
                            timeText = NumberUtil.compactFormat(timeLeft)
                        end
                        PlantInfo.Text = timeText
                    else
                        if isFruit then
                            PlantInfo.Text = string.format("%.0f%% Ripened", currentGrowthPercent)
                        else
                            PlantInfo.Text = string.format("%.0f%% Grown", currentGrowthPercent)
                        end
                    end
                    PlantInfo.Visible = PlantInfo.Text ~= ""
                    
                    -- Value and weight info
                    if isInspected or isFruit then
                        local plantValue = CalculatePlantValue(hoveredPlant)
                        local plantWeight = GetPlantWeight(hoveredPlant)
                        PlantValue.Text = CommaModule.Comma(plantValue) .. "Â¢ â€¢ " .. CommaModule.Comma(plantWeight) .. "kg"
                    else
                        PlantValue.Text = ""
                    end
                    PlantValue.Visible = PlantValue.Text ~= ""
                    
                    -- Mutations and variants
                    local variant, variantColor = GetVariantInfo(hoveredPlant)
                    local mutations = GetMutationInfo(hoveredPlant)
                    SetupMutationsText(PlantMuts, variant, variantColor, mutations)
                    
                    if not isShowingPlantUI then
                        isShowingPlantUI = true
                        Frame.Show_Val.Value = true
                        Frame.Visible = true
                    end
                end
            end
        else
            if isShowingPlantUI then
                isShowingPlantUI = false
                Frame.Show_Val.Value = false
                Frame.Visible = false
                currentPlant = nil
                StopAllRainbowTweens()
            end
        end
    end
end)

-- Fruit proximity prompt UI
ProximityPromptService.PromptShown:Connect(function(prompt, inputType)
    local model = prompt:FindFirstAncestorWhichIsA("Model")
    if model and model:HasTag("Harvestable") then
        StopAllRainbowTweens()
        currentFruit = model
        currentFruit:SetAttribute("IsOutlined", true)
        
        if Highlight.Adornee ~= model then
            Highlight.FillTransparency = 1
        end
        Highlight.Adornee = model
        FruitMutationUI.Visible = true
        
        local displayName = model.Name
        SetupPlantName(FruitName, displayName, displayName)
        
        -- Always show plant value and weight for fruits
        local fruitValue = CalculatePlantValue(model)
        local fruitWeight = GetPlantWeight(model)
        FruitValue.Text = CommaModule.Comma(fruitValue) .. "Â¢ â€¢ " .. CommaModule.Comma(fruitWeight) .. "kg"
        FruitValue.Visible = true
        
        local variant, variantColor = GetVariantInfo(model)
        local mutations = GetMutationInfo(model)
        SetupMutationsText(FruitMutation, variant, variantColor, mutations)
        
        -- Set highlight color
        if #mutations > 0 then
            Highlight.FillColor = Color3.fromHex(mutations[1].Color)
        elseif variantColor then
            Highlight.FillColor = Color3.fromHex(variantColor)
        else
            Highlight.FillColor = Color3.new(1, 1, 1)
        end
        
        isShowingFruitUI = true
    end
end)

ProximityPromptService.PromptHidden:Connect(function(prompt)
    local model = prompt:FindFirstAncestorWhichIsA("Model")
    if model and model:HasTag("Harvestable") and Highlight.Adornee == model then
        Highlight.Adornee = nil
        FruitMutationUI.Visible = false
        if currentFruit then
            currentFruit:SetAttribute("IsOutlined", nil)
        end
        currentFruit = nil
        StopAllRainbowTweens()
        isShowingFruitUI = false
    end
end)

-- Position fruit UI near proximity prompt
RunService.RenderStepped:Connect(function()
    if not currentFruit then
        FruitMutationUI.Visible = false
        return
    end
    
    local prompt = nil
    for _, descendant in currentFruit:GetDescendants() do
        if descendant:IsA("ProximityPrompt") and descendant.Enabled then
            prompt = descendant
            break
        end
    end
    
    if prompt and prompt.Parent:IsA("BasePart") then
        local screenPos, onScreen = CurrentCamera:WorldToViewportPoint(prompt.Parent.Position)
        if onScreen then
            FruitMutationUI.Position = UDim2.new(0, screenPos.X, 0, screenPos.Y + 50)
            FruitMutationUI.Visible = true
        else
            FruitMutationUI.Visible = false
        end
    else
        FruitMutationUI.Visible = false
    end
end)
