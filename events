local otherfunc = {}

--======== [Event Status Check Function] ======--
otherfunc.checkEventStatus = function(eventList, ifEventActiveDoNotCollect)
    local f = false
    if eventList.Visible then
        for _, v in ipairs(eventList:FindFirstChild("List"):GetChildren()) do
            if v:IsA("Frame") and v.Visible and ifEventActiveDoNotCollect[v.Name] then
                f = true
                break
            end
        end
    end
    isEventActive = f
    return f
end
--======== [Refresh Fruits List Function] ======--
otherfunc.refreshFruitsList = function(dropdown, player, functions)
    -- Get farm data
    _, _, Plants_Physical, _ = functions.GetPlayerFarm(player)

    local uniqueFruits = {}

    if not Plants_Physical then
        warn("Plants_Physical folder not found")
        return
    end

    -- Collect unique fruit names
    for _, plant in ipairs(Plants_Physical:GetChildren()) do
        if plant:IsA("Model") then
            local name = plant.Name
            if not table.find(uniqueFruits, name) then
                table.insert(uniqueFruits, name)
            end
        end
    end

    table.sort(uniqueFruits)
    dropdown:Refresh(uniqueFruits)
end

otherfunc.collectSelectedFruit = function(autoFarmRunning, checkEventStatus, cores, functions, localPlayer, ignoreMutation, collectFruitThread)
    local eventPausedNotified = false
    while autoFarmRunning do
        if checkEventStatus() then
            if not eventPausedNotified then
                cores.notify("Paused: A selected event is active. Waiting...", 3, "triangle-alert")
                eventPausedNotified = true
            end
            while checkEventStatus() and autoFarmRunning do
                task.wait(1)
            end
            if autoFarmRunning then
                cores.notify("Resuming selected fruit collection - event ended", 2, "check")
                eventPausedNotified = false
            end
        end

        if not autoFarmRunning then break end

        local targetFruits = functions.parseTargetFruits(fruitDropdown)
        if #targetFruits == 0 then
            cores.notify("No fruits selected", 3, "check")
            task.wait(2)
        else
            local collectionQueue = {}
            local _, _, Plants_Physical, _ = functions.GetPlayerFarm(localPlayer.Name)
            for _, plant in ipairs(Plants_Physical:GetChildren()) do
                if not autoFarmRunning then break end

                local plantName = plant.Name:lower()
                local isTarget = table.find(targetFruits, plantName)
                local hasMutation = functions.hasAnyMutation(plant, ignoreMutation)
                local fruitsFolder = plant:FindFirstChild("Fruits")

                if isTarget then
                    if fruitsFolder then
                        for _, fruit in ipairs(fruitsFolder:GetChildren()) do
                            if not functions.hasAnyMutation(fruit, ignoreMutation) and not fruit:GetAttribute("Favorited") then
                                table.insert(collectionQueue, fruit)
                            end
                        end
                    elseif not hasMutation and not plant:GetAttribute("Favorited") then
                        table.insert(collectionQueue, plant)
                    end
                end
            end

            for _, target in ipairs(collectionQueue) do
                if not autoFarmRunning or checkEventStatus() then break end
                pcall(function()
                    ByteNetReliable:FireServer(harvestBuffer, {target})
                    cores.notify("Collected " .. target.Name, 1, "check")
                end)
                task.wait(AutoFarmSpeedGlobal)
            end
        end

        task.wait()
    end
    collectFruitThread = nil
end



return otherfunc
